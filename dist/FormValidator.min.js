
console.log("This is the development version of FormValidator.js. For production, use the *min.js version!");class FormValidator{constructor(r,e={}){this.form=r,this.options=e,this.errors={}}init(){this.form.addEventListener("submit",(r=>{this.clearErrorMessages();const e=this.form.querySelectorAll("input, textarea");let t=!0;e.forEach((r=>{r.name||(console.error(`Validation error: the input field is missing a *name attribute! Element: ${r}`),t=!1)})),this.validate(),(!t||Object.keys(this.errors).length>0)&&r.preventDefault()}))}validate(){this.clearErrors();this.form.querySelectorAll("input, textarea").forEach((r=>{try{const e=r.dataset.rules?JSON.parse(r.dataset.rules):{};if(r.dataset.rules||console.error(`No rules found for ${r.name}: *data-rules attribute is missing!`),e.required&&!r.value.trim()&&(this.addError(r,e.messages?.required||"This field is required"),this.applyErrorStyle(r)),"number"===r.type&&""!==r.value.trim()&&(e.min&&r.value<e.min&&(this.addError(r,e.messages?.min||`Minimum value is ${e.min}`),this.applyErrorStyle(r)),e.max&&r.value>e.max&&(this.addError(r,e.messages?.max||`Maximum value is ${e.max}`),this.applyErrorStyle(r))),"email"===r.type){const t=/^[^\s@]+@[^\s@]+\.[^\s@]+$/;!0!==e.required||r.value.trim()?""===r.value.trim()||t.test(r.value)||(this.addError(r,e.messages?.invalid||"Please enter a valid email address"),this.applyErrorStyle(r)):(this.addError(r,e.messages?.required||"Email is required"),this.applyErrorStyle(r))}if("password"===r.type&&this.validatePassword(r,e.password||{}),"checkbox"===r.type&&e.required){const t=this.form.querySelectorAll(`input[name="${r.name}"]`);Array.from(t).some((r=>r.checked))||(this.addError(r,e.messages?.required||"At least one option must be selected"),this.applyErrorStyle(r))}if("text"===r.type||"textarea"===r.tagName.toLowerCase()){const t=e.minLength||null,s=e.maxLength||null;""!==r.value.trim()&&(t&&r.value.length<t&&(this.addError(r,e.messages?.minLength||`Must be at least ${t} characters`),this.applyErrorStyle(r)),s&&r.value.length>s&&(this.addError(r,e.messages?.maxLength||`Must be no more than ${s} characters`),this.applyErrorStyle(r)))}if("url"===r.type){const t=/^(ftp|http|https):\/\/[^ "]+$/;!0!==e.required||r.value.trim()?""===r.value.trim()||t.test(r.value)||(this.addError(r,e.messages?.invalid||"Please enter a valid URL"),this.applyErrorStyle(r)):(this.addError(r,e.messages?.required||"URL is required"),this.applyErrorStyle(r))}if("radio"===r.type&&e.required){const t=this.form.querySelectorAll(`input[name="${r.name}"]`);Array.from(t).some((r=>r.checked))||(this.addError(r,e.messages?.required||"Please select an option"),this.applyErrorStyle(r))}}catch(e){console.error(`Error parsing rules for *${r.name}: ${e.message}`)}})),this.showErrors()}validatePassword(r,e){const{minLength:t=8,capitalLetters:s=1,smallLetters:a=1,numbers:o=1,symbols:i=1,messages:l={}}=e;let n=r.value,m=(n.match(/[A-Z]/g)||[]).length,d=(n.match(/[a-z]/g)||[]).length,h=(n.match(/\d/g)||[]).length,u=(n.match(/[\W_]/g)||[]).length;n.length<t&&(this.addError(r,l.minLength||`Password must be at least ${t} characters`),this.applyErrorStyle(r)),m<s&&(this.addError(r,l.capitalLetters||`Password must contain at least ${s} capital letter(s)`),this.applyErrorStyle(r)),d<a&&(this.addError(r,l.smallLetters||`Password must contain at least ${a} small letter(s)`),this.applyErrorStyle(r)),h<o&&(this.addError(r,l.numbers||`Password must contain at least ${o} number(s)`),this.applyErrorStyle(r)),u<i&&(this.addError(r,l.symbols||`Password must contain at least ${i} symbol(s)`),this.applyErrorStyle(r))}addError(r,e){this.errors[r.name]=e}clearErrors(){this.errors={}}applyErrorStyle(r){r.classList.add("error-border");const e=this.options.errorBorderColor||"red";r.style.borderColor=e}showErrors(){this.form.querySelectorAll(".error-message").forEach((r=>r.remove()));for(const r in this.errors){const e=this.form.querySelector(`[name="${r}"]`),t=document.createElement("div");t.classList.add("error-message"),t.style.color=this.options.errorMessageColor||"red",t.style.fontSize=this.options.errorMessageFontSize||"0.9rem",t.style.marginBottom=this.options.errorMessageMarginBottom||"7px",t.style.marginTop=this.options.errorMessageMarginTop||"3px",t.innerText=this.errors[r],t.setAttribute("aria-live","assertive"),e.parentNode.insertBefore(t,e.nextSibling)}}clearErrorMessages(){document.querySelectorAll(".error-message").forEach((r=>r.remove())),document.querySelectorAll(".error-border").forEach((r=>r.classList.remove("error-border")))}}
